{"version":3,"sources":["component/welcome/Welcome.js","component/clock/Clock.js","component/contact/Contact.js","component/navigation/Navigation.js","jeopardyService.js","component/jeopardy/Jeopardy.js","component/page404/Page404.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","name","Clock","state","date","Date","this","timerId","setInterval","tick","clearInterval","setState","className","toLocaleTimeString","Component","Contact","handleChange","event","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","Navigation","to","JeopardyService","url","client","axios","create","get","Jeopardy","answer","user","player","score","Math","random","data","answersCount","result","resetData","bind","alert","getQuestion","then","getNewQuestion","newMethod","catagory","title","userAnswer","question","Page404","App","exact","path","render","match","params","component","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3dfa7cf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Welcome(props) {\r\n  return <div> Welcome {props.name}</div>;\r\n}\r\n\r\nexport default Welcome;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Clock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: new Date(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerId = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerId);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <h2 className=\"Clock\">{this.state.date.toLocaleTimeString()}</h2>;\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Contact extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      submitted: false,\r\n      formData: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n      },\r\n    };\r\n  }\r\n  handleChange = (event) => {\r\n    const formData = { ...this.state.formData };\r\n    formData[event.target.name] = event.target.value;\r\n\r\n    this.setState({ formData });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      submitted: true,\r\n    });\r\n  };\r\n\r\n  resetForm = (event) => {\r\n    this.setState({\r\n      submitted: false,\r\n      formData: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.submitted) {\r\n      return (\r\n        <div className=\"Contact\">\r\n          <p>\r\n            Thank you, {this.state.formData.firstName}, for submitting the form.\r\n          </p>\r\n          <button onClick={this.resetForm}>Reset Form</button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"Contact\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"firstName\">First name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              value={this.state.formData.firstName}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"lastName\">Last name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              value={this.state.formData.lastName}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <button>Submit Form</button>\r\n        </form>\r\n\r\n        <div>\r\n          {this.state.formData.firstName}\r\n          <br />\r\n          {this.state.formData.lastName}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navigation(props) {\r\n  return (\r\n    <div className=\"Navigation\">\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/clock\">Clock</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/contact\">Contact</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/jeopardy\">Jeopardy</Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","//import the axios HTTP client to communicate with the API\r\nimport axios from \"axios\";\r\n\r\nclass JeopardyService {\r\n  constructor(url = \"http://jservice.io/api/random\", client = axios.create()) {\r\n    this.url = url;\r\n    this.client = client;\r\n  }\r\n  getQuestion() {\r\n    return this.client.get(this.url);\r\n  }\r\n}\r\n\r\nexport default JeopardyService;\r\n","import React, { Component } from \"react\";\r\n//import our service\r\nimport JeopardyService from \"../../jeopardyService\";\r\n\r\nclass Jeopardy extends Component {\r\n  //set our initial state and set up our service as this.client on this component\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.client = new JeopardyService();\r\n    this.state = {\r\n      data: {},\r\n      score: 0,\r\n      value: \"\",\r\n      answersCount: 0,\r\n      result: \"\",\r\n      resetData: {},\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert(\"A answer was submitted: \" + this.state.value);\r\n    event.preventDefault();\r\n  }\r\n  // handleInputChange(event) {\r\n  //   const target = event.target;\r\n  //   const value = (target.type === \"answer\") | target.checked | target.value;\r\n  //   const name = target.name;\r\n\r\n  //   this.setState({\r\n  //     [name]: value,\r\n  // });\r\n  //  }\r\n\r\n  answer = (user) => {\r\n    const player = `${user}PlayerScore`;\r\n    let score = this.state[player].score;\r\n\r\n    if (Math.random() > 0.5) {\r\n      score += 1;\r\n    }\r\n\r\n    this.setState((state, props) => ({\r\n      [player]: {\r\n        answer: state[player].score + 1,\r\n        score: score,\r\n      },\r\n    }));\r\n  };\r\n  // playAgain = () => {\r\n  //   this.getQuestions();\r\n  //   this.setState({ score: 0, responses: 0 });\r\n  // };\r\n  // computeAnswer = (answer, correctAnswer) => {\r\n  //   if (answer === correctAnswer) {\r\n  //     this.setState({\r\n  //       score: this.state.score + 1,\r\n  //     });\r\n  //   }\r\n  //   this.setState({\r\n  //     responses: this.state.responses < 5 ? this.state.responses + 1 : 5,\r\n  //   });\r\n  // };\r\n  //get a new random question from the API and add it to the data object in state;\r\n  getNewQuestion() {\r\n    return this.client.getQuestion().then((result) => {\r\n      this.setState({\r\n        data: result.data[0],\r\n      });\r\n    });\r\n  }\r\n\r\n  //when the component mounts, get a the first question\r\n  componentDidMount() {\r\n    // let data = this.context;\r\n    const { data } = this.props;\r\n    this.getNewQuestion(data);\r\n  }\r\n  shouldComponentUpdate() {\r\n    return this.newMethod();\r\n  }\r\n  newMethod() {\r\n    return true;\r\n  }\r\n\r\n  userAnswer(answer) {\r\n    this.setState((state) => ({\r\n      answersCount: {\r\n        ...state.answersCount,\r\n        [answer]: (state.answersCount[answer] || 0) + 1,\r\n      },\r\n      answer: answer,\r\n    }));\r\n  }\r\n\r\n  //display the results on the screen\r\n  render() {\r\n    let catagory = \"loading\";\r\n\r\n    if (this.state.data.catagory) {\r\n      catagory = this.state.data.catagory.title;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Answer:\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n        <div className=\"user-input__answer\">\r\n          <button\r\n            className=\"button\"\r\n            onClick={this.setState.userAnswer}\r\n          ></button>\r\n        </div>\r\n        <strong>User's Score:</strong>\r\n        {this.state.score} <br />\r\n        <strong>Question:</strong>\r\n        {this.state.data.question} <br />\r\n        <strong>Value:</strong>\r\n        {this.state.data.value} <br />\r\n        <strong>Catagory:</strong>\r\n        {catagory}\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Jeopardy;\r\n//citation: geekforgeeks.org/creat-a-quiz-app, reactjs.org for referances.\r\n","import React from \"react\";\r\n\r\nfunction Page404() {\r\n  return <div className=\"Page404\">404 Not Found</div>;\r\n}\r\nexport default Page404;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\nimport Welcome from \"./component/welcome/Welcome\";\r\nimport Clock from \"./component/clock/Clock\";\r\nimport Contact from \"./component/contact/Contact\";\r\nimport Navigation from \"./component/navigation/Navigation\";\r\nimport Jeopardy from \"./component/jeopardy/Jeopardy\";\r\nimport Page404 from \"./component/page404/Page404\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navigation />\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={(props) => <Welcome {...props} name=\"User\" />}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/welcome/:name\"\r\n          render={(props) => (\r\n            <Welcome {...props} name={props.match.params.name} />\r\n          )}\r\n        />\r\n        <Route path=\"/jeopardy\" component={Jeopardy} />\r\n        <Route path=\"/clock\" component={Clock} />\r\n        <Route path=\"/contact\" component={Contact} />\r\n        <Route component={Page404} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename=\"/jeopardy\">\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}